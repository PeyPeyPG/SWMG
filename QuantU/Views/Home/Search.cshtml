@{
    ViewData["Title"] = "Stock";
}

@*Note: Turned White since if I deleted it, the formating was off*@
<p style="color: white;"><br>Press Control+Shift+I and travel to console to look at the values of the stock
</p>

<head>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
        crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
</head>

@*Note: Turned White since if I deleted it, the formating was off*@

    <!--Contain for all elements-->
    <div class="container mt-2">

        <div class="mb-5">
                    <div class="searchbar">
                        <form asp-action="Search">
                            @* Search bar seen on screen
                                NOTE: see how the for and name attribute match the Search parameter name *@
                            <label for="title" class="form-label"></label>
                            <input name="title" class="form-control" type="text" list="datalistOptions"
                                id="exampleDataList" placeholder="">
                            <datalist class="searchbar" id="datalistOptions">
                                @using MongoDB.Driver
                                @using QuantU.Models
                                @{
                                    MongoClient client = new
                                    MongoClient("mongodb+srv://SWMG:Shawdowwizardmoneygang@swmg.hzzuvlg.mongodb.net/?retryWrites=true&w=majority");
                                    var builder = Builders<StockData>.Filter;
                                    var empty = builder.Empty;
                                    List<StockData> results =
                                    client.GetDatabase("SWMG").GetCollection<StockData>("StockData").Find(empty).ToList();
                                    List<string> stocks = new List<String>();
                                    foreach (StockData result in results)
                                    {
                                        stocks.Add(result.name + ", " + result.ticker);
                                    }
                                    stocks.Sort();
                                }
                                @foreach (string stock in stocks)
                                {
                                    <option value='@stock'></option>
                                }
                            </datalist>
                        </form>
                        <script>
                            var wordList = ["Type Here....", "Search Stock...", "Feeling Lucky...", "We Love Casting Spells... <3"];
                            var randomIndex = Math.floor(Math.random() * wordList.length);
                            var randomWord = wordList[randomIndex];
                            var inputElem = document.querySelector('input.form-control');
                            var i = 0;
                            var intervalId = setInterval(function () {
                                if (i < randomWord.length) {
                                    inputElem.placeholder += randomWord.charAt(i);
                                    i++;
                                } else {
                                    clearInterval(intervalId);
                                }
                            }, 100);
                        </script>
                    </div>
                </div>

        <!--First row for two main sections i.e the stock card and random elements-->

            <!--
                Stock Card Column
                col is col-8 which will take up more of the screen
                bootstraps has 12 column grid col-8 takes up 8 of those so 
                this card will always be larger
            -->

                <!--Stock card-->
                <div class="card">

                    <!--Row for items inside stock card-->
                    <div class="card-body row">
                        <!--column containing stock name, exchange rate, price, and price change-->
                        <div class="row">
                            <div class="col">
                                <!--Stock name (the one you animated)-->
                <h5 class="card-title fw-bold" style="font-size: 25px;"></h5>
                @* Animation Script *@
                <script>
                                let token = "cfis95hr01qjvrn525t0cfis95hr01qjvrn525tg";
                                let base_url = "https://finnhub.io/api/v1/stock/profile2?";
                                let symbol = '@ViewBag.ticker';
                                //Forms the API URL with API Token (Key) and the symbol for the stock the user wants
                                let url = base_url + "symbol=" + symbol + "&token=" + token;
                                //fetches url and gets JSON data attached to it
                                fetch(url)
                                    .then(response => response.json())
                                    .then(data => {
                                        console.log(data);
                                        console.log(data.name);
                                        const titleElement = document.querySelector('.card-title');
                                        const titleText = data.name;
                                        let index = 0;
                                        let timeout;
                                        function type() {
                                            titleElement.textContent = titleText.slice(0, index);
                                            index++;
                                            if (index > titleText.length) {
                                                clearTimeout(timeout);
                                            } else {
                                                timeout = setTimeout(type, 100);
                                            }
                                        }
                                        timeout = setTimeout(type, 100);
                                    })
                                    .catch(error => console.log(error));
                            </script>
                                <!--Exchange rate, ticker, and date-->
                                <p id="exchange" class="card-text mb-4 fw-medium" style="font-size: 25px;" >NASDAQ: SWMG â€¢ March 22, 11:52AM</p>
                                
                                <!--price, Percent change-->
    
                            </div>
                            <!--column container button and icon-->
                        <div class="col text-center me-3">
                            <!--Buttton-->
                            <button class="trade-btn" id="trade-now-btn" data-bs-toggle="modal" data-bs-target="#AddStockToPort">Trade Now
                                <!--Your CS minus positioning-->
                                <style>
                                    .trade-btn {
                                        position: relative;
                                        color: red;
                                        font-size: small;
                                        align-items: center;
                                        justify-content: center;
                                        display: inline-block;
                                        width: 11.25rem;
                                        height: 3.125rem;
                                        background: linear-gradient(to left, #c9aaff, #c9aaff);
                                        /*box-shadow: 0 10px 25px #c9aaff;*/
                                        border-radius: 3.125rem;
                                        border: none;
                                        font-size: larger;
                                        font-weight: 500;
                                        color: #fff;
                                        text-transform: uppercase;
                                        letter-spacing: 0.063rem;
                                        animation: pulsate 1.2s ease-in-out infinite both;
                                    }
                                    .trade-btn:hover {
                                        animation-play-state: paused;
                                        transform: scale(1.05);
                                    }
                                    .logo-box {
                                        width: 10rem;
                                        height: 10rem;
                                        background-color: gray;
                                        border-radius: 0.625rem;
                                        position: relative;
                                        left: 25%;
                                        top: 20%;
                                    }
                                </style>
                            </button>

                            @*testing*@
                <div class="modal fade" id="AddStockToPort" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="exampleModalLabel">Add to a Portfolio</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <form asp-action="AddStockToPort">
                                            <div class="modal-body">
                                                <div class="mb-3">
                                                    <label for="shares" class="form-label">Shares</label>
                                                    <input for="shares" name="shares" type="number" class="a" >
                                                    <span class="text-danger" for="shares"></span>
                                                </div>
                                                 <input for="ticker" type="hidden" name="ticker" value="@ViewBag.ticker" class="form-control" >
                                                <div class="input-group mb-3">
                                                    <label class="input-group-text" for="inputGroupSelect01">Options</label>
                                                    <select class="form-select" name="PortfolioName" id="inputGroupSelect01" for="PortfolioName">
                                                        <option selected>Choose Portfolio</option>
                                                        @foreach(Portfolio portfolio in ViewBag.portfolioList)
                                                        { 
                                                            <option value="@portfolio.name">@portfolio.name</option>
                                                        }
                                                    </select>
                                                    </div>
                                                </div>
                                            <div class="modal-footer">
                                                @* submits the form *@
                                                <button type="submit" class="btn btn-primary">Add to Portfolio</button>
                                            </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                        </div>
                            <div class="col">
                                <div id="logo" class="logo-box ">
                            </div>
                            </div>
                            
                        </div>
                    </div>
                    <div class="row">
                    <div class="d-flex justify-content-between">
                                    <p class="display-4 align-self-end"><span id="price">159.75 USD</span> <span id="change"
                                            style="color:green; font-size: smaller;">+0.45 (.28%)</span></p>
                                </div>
                </div>
                </div>
                <div class="tradingview-widget-container" style="height: 18.75rem">
                                <div id="tradingview_12d56" style="height: 18.75rem"></div>
                                <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/symbols/NASDAQ-AAPL/" rel="noopener" target="_blank"><span class="blue-text">@ViewBag.ticker stock chart</span></a> by TradingView</div>
                                <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>
                                <script type="text/javascript">
                                new TradingView.widget(
                                {
                                "autosize": true,
                                "symbol": '@ViewBag.ticker',
                                "interval": "D",
                                "timezone": "America/Chicago",
                                "theme": "dark",
                                "style": "3",
                                "locale": "en",
                                "toolbar_bg": "#f1f3f6",
                                "enable_publishing": false,
                                "allow_symbol_change": true,
                                "container_id": "tradingview_12d56"
                            }
                                );
                                </script>
                            </div>
            <!--End of stock card-->

            <!--Column for search bar and random stocks-->
            <div class="col-md-4">
                <!--Search bar sizes with column-->
            
    </div>

    </div>

<script>

    //fetches url and gets JSON data attached to it
    fetch(url)
        .then(response => response.json())
        .then(data => {
            console.log(data);
            console.log(data.name);
            var date = new Date().toString();
            var arr = date.split(' ');
            var dateString = arr[1] + " " + arr[2] + " " + arr[3] + " " + arr[4];

            document.getElementById('exchange').innerHTML = data.exchange + ": " + data.ticker + " â€¢ " + dateString;

            document.getElementById('logo').style.backgroundImage = "url('" + data.logo + "')";
            document.getElementById('logo').style.backgroundPosition = "center";
            document.getElementById('logo').style.backgroundSize = "cover";


        })
        .catch(error => console.log(error));

    base_url = "https://finnhub.io/api/v1/quote?";
    symbol = '@ViewBag.ticker';

    //Forms the API URL with API Token (Key) and the symbol for the stock the user wants
    url = base_url + "symbol=" + symbol + "&token=" + token;
    fetch(url)
        .then(response => response.json())
        .then(data => {
            console.log(data);
            document.getElementById('price').innerHTML = data.c + " USD";
            document.getElementById('change').style.fontSize = "smaller";
            let add = "";
            if (data.d > 0){
                document.getElementById('change').style.color = "green";
                add = "+";
            }
            else {
                document.getElementById('change').style.color = "red";
            }
            document.getElementById('change').innerHTML = add + data.d + " (" + add + data.dp + "%)";


        })
        .catch(error => console.log(error));
</script>
