@{
    ViewData["Title"] = "Stock";
}

@* <py-config>
packages = [
"matplotlib", "numpy", "pandas",
"asyncio", "pandas_datareader"
]
plugins = [
"https://pyscript.net/latest/plugins/python/py_tutor.py"
]
</py-config>

<div id="plot"></div>

<py-script output="plot">
from pyodide.http import pyfetch
import json
import asyncio
import re
import warnings
from datetime import date
from datetime import timedelta
import pandas as pd
import matplotlib.pyplot as plt

async def main():
    # Pull stock market price data from 12Data API
    token = "605c88e8f8bb46a7b992a85dba7fd641"
    base_url = "https://api.twelvedata.com/time_series?"
    symbol = '@ViewBag.ticker'

    # Pull stock market data from finnhub
    finn_token = "cfis95hr01qjvrn525t0cfis95hr01qjvrn525tg"
    finn_base_url = "https://finnhub.io/api/v1/stock/profile2?"

    # Forms the API URL with API Token (Key) and the symbol for the stock the user wants
    finn_url = finn_base_url + "symbol=" + symbol + "&token=" + finn_token

    # Aquires the IPO date of the stock
    finn_response = await pyfetch(url=finn_url)
    finn_data = await finn_response.json()
    ipo_date = finn_data["ipo"]
  
    # Set the start date to the IPO date
    startDate = ipo_date

    # Get today's date
    today = date.today()
    today_str = today.strftime('%Y-%m-%d')

    # Construct API URL
    api_url = f"{base_url}start_date={startDate}&end_date={today_str}&symbol={symbol.lower()}&interval=1day&apikey={token}"

    # Fetch the from 12Data API
    response = await pyfetch(url=api_url)
    data = await response.json()

    # Create an empty DataFrame
    df = pd.DataFrame(columns=['date', 'open', 'high', 'low', 'close', 'volume'])

    # Suppress the FutureWarning
    warnings.simplefilter(action='ignore', category=FutureWarning)

    # Loop through the data and append each data point to the DataFrame
    for values in data['values']:
        df = df.append({'date': values['datetime'], 'open': values['open'], 'high': values['high'], 'low': values['low'], 'close': values['close'], 'volume': values['volume']}, ignore_index=True)

    df = df.reset_index()

    # Reverse the order of the DataFrame
    df1 = df.iloc[::-1]

    # Convert the date column to datetime
    df1['date'] = pd.to_datetime(df1['date'])
    # Convert the close, open, high, and low columns to numeric
    df1['close'] = pd.to_numeric(df1['close'])
    df1['open'] = pd.to_numeric(df1['open'])
    df1['high'] = pd.to_numeric(df1['high'])
    df1['low'] = pd.to_numeric(df1['low'])

    # Calculate the 100 and 200 day rolling averages
    # of the open prices
    ma100 = df1['open'].rolling(window=100).mean()
    ma200 = df1['open'].rolling(window=200).mean()

    # Plots opening price and rolling averages
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df1['date'], df1['open'], color='tab:blue')
    ax.plot(df1['date'], ma100, color='tab:orange', label='100 Day Rolling Average')
    ax.plot(df1['date'], ma200, color='tab:green', label='200 Day Rolling Average')
    ax.set(xlabel='Time', ylabel='Price($)',
           title='Opening Price Rolling Averages of @ViewBag.ticker')
    ax.legend()
    ax.grid()
    pyscript.write("plot", fig)
asyncio.ensure_future(main()) 
</py-script> *@

<script>
    let token = "cfis95hr01qjvrn525t0cfis95hr01qjvrn525tg";
    let base_url = "https://finnhub.io/api/v1/stock/profile2?";
    let symbol = '@ViewBag.ticker';

    //Forms the API URL with API Token (Key) and the symbol for the stock the user wants
    let url = base_url + "symbol=" + symbol + "&token=" + token;

    //fetches url and gets JSON data attached to it
    fetch(url)
    .then(response => response.json())
    .then(data => {
        console.log(data);
        console.log(data.name);
        console.log(data.ipo);
        begin = data.ipo;
    })
    .catch(error => console.log(error));
</script>

<p><br>Press Control+Shift+I and travel to console to look at the values of
    the stock</p> 

